# -*- coding: utf-8 -*-
"""kode vis .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A1rOkX5C-OcgUIGVCspGsGeE-oHn4SUJ
"""

!pip install pandas
!pip install plotly
!pip install dash
!pip install dash pandas plotly

import plotly.express as px
import dash
from dash import dcc, html, Input, Output, State
import plotly.graph_objects as go
import pandas as pd

from google.colab import drive
import pandas as pd
import os

#Mount Google Drive
drive.mount('/content/drive')

# Define the file path
# Update the path if your file is inside a specific folder
file_path = '/content/drive/My Drive/data_vis.csv'  #Adjust this path if the file is in a subfolder

# Verify the file exists
if os.path.exists(file_path):
    print("File found:", file_path)
else:
    print("File not found. Please check the file path.")
    # List all files in your Drive to help locate the file
    print("Files in My Drive:", os.listdir('/content/drive/My Drive/'))

# Load the file into a Pandas DataFrame
try:
    # Handle potential bad lines in the file
    df = pd.read_csv(file_path, sep=';', on_bad_lines='skip')  # Skips lines with issues
    print("File loaded successfully!")
    print("First few rows of the dataset:")
    print(df.head())  # Display the first few rows of the dataset
except Exception as e:
    print("Error loading file:", e)

# Initialize Dash app
app = dash.Dash(__name__)

# Create the DataFrame
countries_to_highlight = [
    "Albania", "Armenia", "Austria", "Belarus", "Belgium", "Bosnia and Herzegovina",
    "Bulgaria", "Croatia", "Cyprus", "Czechia", "Denmark", "Estonia", "Faroe Islands",
    "Finland", "France", "Georgia", "Germany", "Greece", "Greenland", "Hungary",
    "Iceland", "Ireland", "Italy", "Kosovo", "Latvia", "Liechtenstein", "Lithuania",
    "Luxembourg", "Malta", "Moldova", "Monaco", "Montenegro", "Netherlands", "Norway",
    "Poland", "Portugal", "Romania", "Russia", "Serbia", "Slovak Republic", "Slovenia",
    "Spain", "Sweden", "Switzerland", "UK", "Ukraine"
]
iso_mapping = {
    "Albania": "ALB", "Armenia": "ARM", "Austria": "AUT", "Belarus": "BLR", "Belgium": "BEL",
    "Bosnia and Herzegovina": "BIH", "Bulgaria": "BGR", "Croatia": "HRV", "Cyprus": "CYP",
    "Czechia": "CZE", "Denmark": "DNK", "Estonia": "EST", "Faroe Islands": "FRO",
    "Finland": "FIN", "France": "FRA", "Georgia": "GEO", "Germany": "DEU",
    "Greece": "GRC", "Greenland": "GRL", "Hungary": "HUN", "Iceland": "ISL",
    "Ireland": "IRL", "Italy": "ITA", "Kosovo": "XKX", "Latvia": "LVA",
    "Liechtenstein": "LIE", "Lithuania": "LTU", "Luxembourg": "LUX", "Malta": "MLT",
    "Moldova": "MDA", "Monaco": "MCO", "Montenegro": "MNE", "Netherlands": "NLD",
    "Norway": "NOR", "Poland": "POL", "Portugal": "PRT", "Romania": "ROU", "Russia": "RUS",
    "Serbia": "SRB", "Slovak Republic": "SVK", "Slovenia": "SVN", "Spain": "ESP",
    "Sweden": "SWE", "Switzerland": "CHE", "UK": "GBR", "Ukraine": "UKR"
}

highlight_df = pd.DataFrame({"Country": countries_to_highlight})
highlight_df["color"] = "#C5CAAA"  # Default color for countries
highlight_df["ISO"] = highlight_df["Country"].map(iso_mapping)
highlight_df = highlight_df.dropna(subset=["ISO"])

# Create the choropleth map figure
fig = go.Figure(data=go.Choropleth(
    locations=highlight_df["ISO"],       # ISO Alpha-3 country codes
    z=[0] * len(highlight_df),          # Dummy data for color mapping
    locationmode="ISO-3",               # Use ISO Alpha-3 for location matching
    colorscale=["#C5CAAA", "#8E0001"],  # Two colors: default and highlight
    showscale=False,                    # Hide color bar
    marker_line_color='black',          # Country border color
    marker_line_width=0.5,              # Country border width
    hovertext=highlight_df["Country"],  # Country name on hover
    hoverinfo="text"                    # Show only hover text
))

# Update map appearance (title inside the figure)
fig.update_geos(
    scope="europe",                     # Restrict map to Europe
    projection_type="natural earth",    # Use Natural Earth projection
    showland=True,                      # Show land areas
    landcolor="#C5CAAA",                # Default background land color
    showocean=False,                    # Hide ocean
    showframe=False,                    # Remove map frame
    showcoastlines=False,               # Hide coastlines
    bgcolor="#C5CAAA"                   # Match background color
)

# Set the title within the map figure
fig.update_layout(
    title="European Countries Statistics",  # Generalized title
    title_font=dict(size=45, color="#8E0001", family="Champion Gothic Featherweight"),
    title_y=0.95,
    dragmode=False,                     # Disable dragging on the map
    height=600,
    width=900,
    plot_bgcolor="#C5CAAA",
    paper_bgcolor="#C5CAAA",
    margin={"r": 0, "t": 50, "l": 0, "b": 0}
)

# Layout with the map and no title at the top
app.layout = html.Div([
    # Overordnet layout
    html.Div([
        # Fakta-boks til venstre for kortet med høj og lav værdi for de tre variabler
        html.Div([
            html.H3("Overview of the fertility dataset", style={'color': '#8E0001', 'fontFamily': '"Champion Gothic Featherweight"'}),
            html.P(f"Highest Birth Rate: {df['Birth Rate'].max()} ({df.loc[df['Birth Rate'].idxmax(), 'Country']}, {df.loc[df['Birth Rate'].idxmax(), 'Year']})", style={'fontSize': '18px', 'color': '#093041', 'fontFamily': '"Champion Gothic Featherweight"'}),
            html.P(f"Lowest Birth Rate: {df['Birth Rate'].min()} ({df.loc[df['Birth Rate'].idxmin(), 'Country']}, {df.loc[df['Birth Rate'].idxmin(), 'Year']})", style={'fontSize': '18px', 'color': '#093041', 'fontFamily': '"Champion Gothic Featherweight"'}),
            html.P(f"Highest Total fertility rate: {df['Total Fertility Rate'].max()} ({df.loc[df['Total Fertility Rate'].idxmax(), 'Country']}, {df.loc[df['Total Fertility Rate'].idxmax(), 'Year']})", style={'fontSize': '18px', 'color': '#093041', 'fontFamily': '"Champion Gothic Featherweight"'}),
            html.P(f"Lowest Total fertility rate: {df['Total Fertility Rate'].min()} ({df.loc[df['Total Fertility Rate'].idxmin(), 'Country']}, {df.loc[df['Total Fertility Rate'].idxmin(), 'Year']})", style={'fontSize': '18px', 'color': '#093041', 'fontFamily': '"Champion Gothic Featherweight"'}),
            html.P(f"Highest Mean age of birth: {df['MAB'].max()} ({df.loc[df['MAB'].idxmax(), 'Country']}, {df.loc[df['MAB'].idxmax(), 'Year']})", style={'fontSize': '18px', 'color': '#093041', 'fontFamily': '"Champion Gothic Featherweight"'}),
            html.P(f"Lowest Mean age of birth: {df['MAB'].min()} ({df.loc[df['MAB'].idxmin(), 'Country']}, {df.loc[df['MAB'].idxmin(), 'Year']})", style={'fontSize': '18px', 'color': '#093041', 'fontFamily': '"Champion Gothic Featherweight"'}),
            # dette er den historiske information der kan komme frem når man klikker på et land.
            html.Div(id='country-history', style={'marginTop': '20px', 'fontSize': '16px', 'color': '#8E0001', 'fontFamily': '"Champion Gothic Featherweight"'}),
        ], style={
            'width': '30%',
            'display': 'inline-block',
            'verticalAlign': 'top',
            'padding': '20px',
            'backgroundColor': '#C5CAAA',
            'border': '1px solid #E0E0E0',
            'marginRight': '20px',
            'height': '558px'
        }),

        # Kort til højre
        html.Div([
            dcc.Graph(
                id='map',
                figure=fig,  # Sørg for, at fig er defineret et sted i koden
                config={'displayModeBar': False}  # Disable Plotly toolbar
            ),
            html.Div(id='country-info', style={'marginTop': '20px'}),
        ], style={'width': '65%', 'display': 'inline-block'}),
    ], style={'display': 'flex', 'justifyContent': 'space-between'}),  # Flex container

    # Kontrol-sektionen nedenunder
    html.Div([
        #den øverste dropdown bar der styre valg af sammenligningsland
        dcc.Dropdown(
            id='country-dropdown',
            options=[{'label': country, 'value': country} for country in highlight_df['Country']],
            value=None,
            placeholder="Select a Country",
            style={'marginBottom': '20px'},
        ),
        #den her slider vælger man det år man gerne vil se data fra
        dcc.Slider(
            id='start-year-slider',
            min=df['Year'].min(),
            max=df['Year'].max(),
            step=1,
            value=df['Year'].min(),
            marks={str(year): str(year) for year in range(df['Year'].min(), df['Year'].max() + 1, 5)},
        ),
        #her vælger man det år man gerne vil se data til
        dcc.Slider(
            id='end-year-slider',
            min=df['Year'].min(),
            max=df['Year'].max(),
            step=1,
            value=df['Year'].max(),
            marks={str(year): str(year) for year in range(df['Year'].min(), df['Year'].max() + 1, 5)},
        ),
        #her vælger man den variable af data man vil se på den er sat til som standard at vise TFR først
        dcc.Dropdown(
            id='variable-dropdown',
            options=[
                {'label': 'Total Fertility Rate', 'value': 'Total Fertility Rate'},
                {'label': 'Birth Rate', 'value': 'Birth Rate'},
                {'label': 'Mean Age at Birth (MAB)', 'value': 'MAB'},
            ],
            value='Total Fertility Rate',
            placeholder="Select a Variable",
            style={'marginBottom': '20px', 'marginTop': '20px'},
        ),
        #linje grafen
        dcc.Graph(id='selected-countries-graph'),
    ], id='controls-section', style={'marginTop': '20px'}),

    # Explore More Countries button
    html.Button(
        "← Explore more countries",
        id="go-back-btn",
        style={
            "position": "fixed",
            "top": "20px",
            "right": "20px",
            "background": "linear-gradient(45deg, #FF6F61, #FF3D00)",
            "color": "white",
            "border": "none",
            "padding": "12px 24px",
            "fontSize": "18px",
            "fontWeight": "bold",
            "cursor": "pointer",
            "borderRadius": "30px",
            "boxShadow": "0 4px 8px rgba(0, 0, 0, 0.2)",
            "transition": "all 0.3s ease",
            "display": "none",
        }
    )
])

#her skal man skrive den vigtige historiske viden ind som vi kender om et pågældende land for at det kan blive vist i historie boksen
country_histories = {
    'Denmark': "19th century: High fertility, around 5-6 children per woman. 1930: Abortion was legalized in Denmark, but only under strict conditions (such as when the mother's life was at risk), and contraception was officially permitted in Denmark. 1960: The contraceptive pill was introduced and quickly became popular and fertility decreased to approximately 2.5 children per woman. 1973: Abortion was fully legalized in Denmark without restrictions within the first 12 weeks of pregnancy.",
    'Sweden': "Det vides ikke med sikkerhed ....",
    # Tilføj flere lande og deres historie her
}


@app.callback(
    [
        Output('map', 'figure'), #Kortet opdateres med en ny figur, der viser de relevante data
        Output('country-info', 'children'), #Vist tekstinformation om det valgte land.
        Output('country-history', 'children'), #Vist historisk information om landet i relation til fertilitet.
        Output('country-dropdown', 'value'), #Opdaterer den valgte værdi i dropdown-menuen (hvis et land er valgt på kortet).
        Output('controls-section', 'style'), #Ændrer synligheden af kontrolsektionen (f.eks. årsskydere og dropdown) baseret på om et land er valgt.
        Output('go-back-btn', 'style'), #Ændrer synligheden af knappen "gå tilbage" baseret på om et land er valgt.
        Output('selected-countries-graph', 'figure') # Opdaterer grafen med de relevante data for det/de valgte lande.
    ],
    [
        Input('map', 'clickData'), #Dette fanger data fra kortet, når en bruger klikker på et land. Det bruges til at bestemme, hvilket land der er blevet valgt.
        Input('country-dropdown', 'value'), #Dette tager den værdi, der er valgt fra en dropdown-menu med lande. Brugeren kan vælge et land fra denne menu.
        Input('go-back-btn', 'n_clicks'), #Dette tæller, hvor mange gange en bruger har klikket på "gå tilbage"-knappen.
        Input('start-year-slider', 'value'), #Disse skydere definerer årsdeltageren ønsker at filtrere dataene efter (fra startår til slutår).
        Input('end-year-slider', 'value'),
        Input('variable-dropdown', 'value'), #Dette tager den værdi, der er valgt fra en dropdown-menu, der styrer hvilken variabel der skal vises i grafen.
    ]
)
def update_content(clickData, dropdown_value, n_clicks, start_year, end_year, selected_variable):
    # Initial kortopsætning
    # Hvis ingen land er valgt, oprettes et grundlæggende kort, der viser alle lande i grå.
    initial_fig = go.Figure(data=go.Choropleth(
        locations=highlight_df["ISO"],
        z=[0] * len(highlight_df),
        locationmode="ISO-3",
        colorscale=["#C5CAAA", "#8E0001"],
        showscale=False,
        marker_line_color='black',
        marker_line_width=0.5,
        hovertext=highlight_df["Country"],
        hoverinfo="text"
    ))

    initial_fig.update_geos(
        scope="europe",
        projection_type="natural earth",
        showland=True,
        landcolor="#C5CAAA",
        showocean=False,
        showframe=False,
        showcoastlines=False,
        bgcolor="#C5CAAA"
    )

    initial_fig.update_layout(
        title="European Countries Birth Rate",
        title_font=dict(size=45, color="#8E0001", family="Champion Gothic Featherweight"),
        title_y=0.95,
        dragmode=False,
        height=600,
        width=900,
        plot_bgcolor="#C5CAAA",
        paper_bgcolor="#C5CAAA",
        margin={"r": 0, "t": 50, "l": 0, "b": 0}
    )


    # Hvis intet land er valgt eller klikket
    # Hvis der ikke er noget klikdata og ingen valgt værdi i dropdown, vises en standard besked.
    if not clickData and not dropdown_value:
        return (
            initial_fig,
            html.Div("Select or click a country to see more information.", style={'fontSize': '18px', 'color': '#8E0001','fontFamily': '"Champion Gothic Featherweight"'}),
            None,
            None,  # Skjul dropdown value
            {'display': 'none'},  # Skjul kontrolsektionen
            {"display": "none"},  # Skjul tilbageknappen
            {},  # Skjul grafen
        )

    # Hvis et land er valgt, vis kontrolsektionen og tilbageknappen
    # Vises kun hvis et land er valgt, enten ved klik på kortet eller via dropdown.
    controls_section_style = {'display': 'block'} if clickData or dropdown_value else {'display': 'none'}
    go_back_button_style = {"display": "inline-block"} if clickData or dropdown_value else {"display": "none"}

    # Bestem det valgte land
    if clickData:
        clicked_country_iso = clickData['points'][0]['location']
        clicked_country = highlight_df[highlight_df['ISO'] == clicked_country_iso]['Country'].values[0]
    else:
        clicked_country = dropdown_value

    clicked_country_iso = iso_mapping.get(clicked_country, None)
    country_history = country_histories.get(clicked_country, "No historical data available for this country.")

    # Vist historik for landet
    country_history_div = html.Div([
        html.H4(f"History of {clicked_country} with relation to fertility", style={'fontSize': '20px', 'color': '#8E0001', 'fontFamily': '"Champion Gothic Featherweight"'}),
        html.P(country_history, style={'fontSize': '18px', 'color': '#11272F', 'fontFamily': '"Champion Gothic Featherweight"'}),
    ])

     # Hvis der ikke findes ISO-kode for landet, vis fejl
    if not clicked_country_iso:
        return (
            initial_fig,
            html.Div("Error: Country data is missing.", style={'fontSize': '18px', 'color': '#8E0001','fontFamily': '"Champion Gothic Featherweight"'}),
            None,
            None,  # Skjul dropdown value
            {'display': 'none'},  # Skjul kontrolsektionen
            {"display": "none"},  # Skjul tilbageknappen
            {},  # Skjul grafen
        )

    # Opdater farverne i kortet
    # Hvis et land er valgt, farves det rødt, ellers grå for de andre lande.
    highlight_df['color'] = highlight_df['ISO'].apply(lambda x: "#8E0001" if x == clicked_country_iso else "#C5CAAA")

    updated_fig = go.Figure(data=go.Choropleth(
        locations=highlight_df["ISO"],
        z=[1 if x == clicked_country_iso else 0 for x in highlight_df["ISO"]],
        locationmode="ISO-3",
        colorscale=["#C5CAAA", "#8E0001"],
        showscale=False,
        marker_line_color='black',
        marker_line_width=0.5,
        hovertext=highlight_df["Country"],
        hoverinfo="text"
    ))

    updated_fig.update_geos(
        scope="europe",
        projection_type="natural earth",
        showland=True,
        landcolor="#C5CAAA",
        showocean=False,
        showframe=False,
        showcoastlines=False,
        bgcolor="#C5CAAA"
    )

    updated_fig.update_layout(
        title="European Countries Birth Rate",
        title_font=dict(size=45, color="#8E0001", family="Champion Gothic Featherweight"),
        title_y=0.95,
        dragmode=False,
        height=600,
        width=900,
        plot_bgcolor="#C5CAAA",
        paper_bgcolor="#C5CAAA",
        margin={"r": 0, "t": 50, "l": 0, "b": 0}
    )

    # Hvis et land er valgt, vis faktakassen
    # Vist tekstboks med information om det valgte land og hvad der kan sammenlignes.
    country_info = html.Div([
        html.P(f"You've selected {clicked_country}.", style={'fontSize': '16px', 'color': '#8E0001', 'fontFamily': '"Champion Gothic Featherweight"'}),
        html.P(f"It is now possible to perform a cross-country comparison of the fertility data in relation to each other.", style={'color': '#8E0001', 'fontFamily': '"Champion Gothic Featherweight"'}),
    ])

    # Filtrér data for grafer
    # Filtrerer data baseret på det valgte land, år og variabel.
    selected_countries = [clicked_country]
    if dropdown_value and dropdown_value != clicked_country:
        selected_countries.append(dropdown_value)

    filtered_data = df[(df['Country'].isin(selected_countries)) & (df['Year'] >= start_year) & (df['Year'] <= end_year)]

     # Skab label for den valgte variabel
    variable_label = {
        'Total fertility rate': 'Total Fertility Rate (tfr)',
        'birth rate': 'Birth Rate',
        'mean age of birth': 'Mean Age at Birth (mab)'
    }.get(selected_variable, selected_variable)

     # Farvekort for grafen
    # Giver farver til de valgte lande, så de kan skelnes på grafen.
    color_map = {}
    if clicked_country:
        color_map[clicked_country] = "#B61B1F"  # Farve for landet valgt på kortet
    if dropdown_value:
        color_map[dropdown_value] = "#0D506A"  # Farve for landet valgt i dropdown

    # Opret linjegraf med farverne
    graph_fig = px.line(
        filtered_data,
        x='Year',
        y=selected_variable,
        color='Country',
        title=f"{variable_label} Comparison ({start_year} - {end_year})",
        labels={'Year': 'Year', selected_variable: variable_label},
        color_discrete_map=color_map  # Brug farvekortet
    )

    graph_fig.update_layout(
        plot_bgcolor="#C5CAAA",  # Sæt baggrundsfarven for linjegrafen
        paper_bgcolor="#C5CAAA",  # Baggrundsfarve for området uden for grafen
    )

    return (
        updated_fig,
        country_info,  # Vis faktakassen for det valgte land
        country_history_div,
        dropdown_value,
        controls_section_style,  # Vis kontrolsektionen
        go_back_button_style,  # Vis tilbageknappen
        graph_fig,  # Vis grafen for det valgte land
    )



# Run the app
if __name__ == '__main__':
    app.run_server(debug=True, host='0.0.0.0', port=8053)

import dash
from dash import dcc, html, Input, Output, State
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px

# Initialize the Dash app
app = dash.Dash(__name__)
app.title = "Fertility Data Dashboard"

# Load and clean the dataset
file_path = '/Users/zsa/Desktop/data_vis.csv'  # Update the path as needed

try:
    # Read only the first 5 columns assuming they are the required ones
    df = pd.read_csv(
        file_path,
        sep=';',
        skiprows=1,
        on_bad_lines='skip',
        usecols=[0, 1, 2, 3, 4],  # Adjust indices based on your CSV structure
        names=['Year', 'Country', 'Total Fertility Rate', 'Birth Rate', 'MAB']
    )
except FileNotFoundError:
    print(f"Error: The file at {file_path} was not found.")
    df = pd.DataFrame(columns=['Year', 'Country', 'Total Fertility Rate', 'Birth Rate', 'MAB'])
except ValueError as ve:
    print(f"ValueError: {ve}")
    df = pd.DataFrame(columns=['Year', 'Country', 'Total Fertility Rate', 'Birth Rate', 'MAB'])

# Replace alternate country names to ensure consistency
df['Country'] = df['Country'].replace({
    'Germany East': 'Germany',
    'Germany West': 'Germany',
    'Slovak Republic': 'Slovakia',
    'UK - England and Wales': 'United Kingdom',
    'UK - Northern Ireland': 'United Kingdom'
})

# Map ISO codes for countries (needed for the choropleth map)
iso_mapping = {
    "Albania": "ALB", "Armenia": "ARM", "Austria": "AUT",
    "Belarus": "BLR", "Belgium": "BEL", "Bosnia and Herzegovina": "BIH",
    "Bulgaria": "BGR", "Croatia": "HRV", "Cyprus": "CYP", "Czechia": "CZE",
    "Denmark": "DNK", "Estonia": "EST", "Faroe Islands": "FRO", "Finland": "FIN",
    "France": "FRA", "Georgia": "GEO", "Germany": "DEU", "Greece": "GRC",
    "Greenland": "GRL", "Hungary": "HUN", "Iceland": "ISL", "Ireland": "IRL",
    "Italy": "ITA", "Kosovo": "XKX", "Latvia": "LVA", "Liechtenstein": "LIE",
    "Lithuania": "LTU", "Luxembourg": "LUX", "Malta": "MLT", "Moldova": "MDA",
    "Monaco": "MCO", "Montenegro": "MNE", "Netherlands": "NLD", "Norway": "NOR",
    "Poland": "POL", "Portugal": "PRT", "Romania": "ROU", "Russia": "RUS",
    "Serbia": "SRB", "Slovakia": "SVK", "Slovenia": "SVN", "Spain": "ESP",
    "Sweden": "SWE", "Switzerland": "CHE", "United Kingdom": "GBR", "Ukraine": "UKR"
}
df["ISO"] = df["Country"].map(iso_mapping)

# Add historical information for specific countries
country_histories = {
    'Denmark': (
        "19th century: High fertility, around 5-6 children per woman.\n"
        "1930: Abortion was legalized in Denmark, but only under strict conditions (such as when the mother's life was at risk), and contraception was officially permitted in Denmark.\n"
        "1960: The contraceptive pill was introduced and quickly became popular and fertility decreased to approximately 2.5 children per woman.\n"
        "1973: Abortion was fully legalized in Denmark without restrictions within the first 12 weeks of pregnancy."
    ),
    'Sweden': (
        "Data to come ... \n"
    ),
    'Slovakia': (
        "Post-1989: After communism, reforms aimed at supporting families with 2-3 children, but no comprehensive policy system was implemented.\n"
        "The current fertility rate for Slovakia in 2025 is 1.569 births per woman, a 0.58% increase from 2024.\n"
        "Current: Slovakia offers parental leave, child allowances, and housing support, but fertility remains below replacement level."
    ),
    # Add more countries and their history here
}

# Remove rows with missing ISO codes to prevent mapping errors
initial_row_count = df.shape[0]
df = df.dropna(subset=["ISO"])
final_row_count = df.shape[0]
rows_dropped = initial_row_count - final_row_count
if rows_dropped > 0:
    print(f"Dropped {rows_dropped} rows due to missing ISO codes.")

# Remove duplicate countries for the map
highlight_df = df.drop_duplicates(subset=["Country"]).copy()

# Helper Functions

def no_data_chart(chart_title, x_label, y_label, message):
    """
    Generates a placeholder chart with titles and axis labels when data is unavailable.

    Parameters:
    - chart_title (str): The title of the chart.
    - x_label (str): The label for the X-axis.
    - y_label (str): The label for the Y-axis.
    - message (str): The message to display in the center of the chart.

    Returns:
    - fig (go.Figure): A Plotly figure object with the specified layout and annotation.
    """
    fig = go.Figure()
    fig.update_layout(
        title=chart_title,
        xaxis=dict(title=x_label),
        yaxis=dict(title=y_label),
        plot_bgcolor="#C5CAAA",
        paper_bgcolor="#C5CAAA",
        height=250,
        margin=dict(l=50, r=10, t=50, b=50)
    )
    fig.add_annotation(
        text=message,
        xref="paper",
        yref="paper",
        x=0.5,
        y=0.5,
        showarrow=False,
        font=dict(size=16, color="#8E0001"),
        align="center"
    )
    return fig

def build_chart(chart_title, x, y, x_label, y_label, color):
    """
    Creates a generic line chart with titles and axis labels.

    Parameters:
    - chart_title (str): The title of the chart.
    - x (list or pd.Series): Data for the X-axis.
    - y (list or pd.Series): Data for the Y-axis.
    - x_label (str): Label for the X-axis.
    - y_label (str): Label for the Y-axis.
    - color (str): Color of the line and markers.

    Returns:
    - fig (go.Figure): A Plotly figure object representing the line chart.
    """
    if x.empty or y.empty:
        # If there's no data, return an empty chart with titles and a message
        return no_data_chart(chart_title, x_label, y_label, "No data available for this chart.")

    fig = go.Figure(
        data=go.Scatter(
            x=x,
            y=y,
            mode="lines+markers",
            line=dict(color=color, width=2),
            marker=dict(size=6),
            hovertemplate=f"Year: %{{x}}<br>{y_label}: %{{y}}<extra></extra>"
        )
    )
    fig.update_layout(
        title=chart_title,
        xaxis=dict(title=x_label),
        yaxis=dict(title=y_label),
        plot_bgcolor="#C5CAAA",
        paper_bgcolor="#C5CAAA",
        height=250,
        margin=dict(l=50, r=10, t=50, b=50),
        showlegend=False
    )
    return fig

def build_tfr_chart(selected_country):
    """
    Creates a Total Fertility Rate (TFR) chart for the selected country.

    Parameters:
    - selected_country (str): The name of the selected country.

    Returns:
    - fig (go.Figure): A Plotly figure object representing the TFR chart.
    """
    ctry_data = df[df["Country"] == selected_country].copy()
    if ctry_data["Total Fertility Rate"].dropna().empty:
        return no_data_chart(
            chart_title=f"<b>Total Fertility Rate (TFR) in <b> {selected_country}",
            x_label="Year",
            y_label="Total Fertility Rate (TFR)",
            message="No TFR data available for this country"
        )
    ctry_data.sort_values("Year", inplace=True)
    fig = build_chart(
        chart_title=f"<b>Total Fertility Rate (TFR) in <b> {selected_country}",
        x=ctry_data["Year"],
        y=ctry_data["Total Fertility Rate"],
        x_label="Year",
        y_label="Total Fertility Rate (TFR)",
        color="#11272F"
    )
    return fig

def build_mab_chart(selected_country):
    """
    Creates a Mean Age at Birth (MAB) chart for the selected country.

    Parameters:
    - selected_country (str): The name of the selected country.

    Returns:
    - fig (go.Figure): A Plotly figure object representing the MAB chart.
    """
    ctry_data = df[df["Country"] == selected_country].copy()
    if ctry_data["MAB"].dropna().empty:
        return no_data_chart(
            chart_title=f"<b>Mean Age at Birth (MAB) in <b> {selected_country}",
            x_label="Year",
            y_label="Mean Age at Birth (MAB)",
            message="No MAB data available for this country"
        )
    ctry_data.sort_values("Year", inplace=True)
    fig = go.Figure(
        data=go.Bar(
            x=ctry_data["Year"],
            y=ctry_data["MAB"],
            marker=dict(
                color=ctry_data["MAB"],
                colorscale=[
                    [0.0, "#8E0001"],
                    [0.5, "#093041"],
                    [0.67, "#838874"],
                    [1.0, "#372426"]
                ],
                showscale=True
            )
        )
    )
    fig.update_layout(
        title=f"<b> Mean Age at Birth (MAB) in <b> {selected_country}",
        xaxis=dict(title="Year"),
        yaxis=dict(title="Mean Age at Birth (MAB)"),
        plot_bgcolor="#C5CAAA",
        paper_bgcolor="#C5CAAA",
        height=250,
        margin=dict(l=50, r=10, t=50, b=50)
    )
    return fig

def build_map_figure(selected_country=None):
    """
    Creates a choropleth map highlighting the selected country and adds a title.

    Parameters:
    - selected_country (str, optional): The country to highlight. Defaults to None.

    Returns:
    - fig (go.Figure): A Plotly figure object representing the choropleth map with a title.
    """
    if selected_country:
        # Assign 1 for the selected country and 0 for others
        z_vals = [1 if country == selected_country else 0 for country in highlight_df["Country"]]
        # Define a two-color colorscale: red for default, blue for selected
        colorscale = [
            [0.0, "#8E0001"],  # Red for non-selected countries
            [1.0, "#093041"]   # Blue for the selected country
        ]
    else:
        # All countries have the same value, no highlighting (all red)
        z_vals = [0 for country in highlight_df["Country"]]
        colorscale = [
            [0.0, "#8E0001"],
            [1.0, "#8E0001"]
        ]

    fig = go.Figure(
        data=go.Choropleth(
            locations=highlight_df["ISO"],
            z=z_vals,
            locationmode="ISO-3",
            colorscale=colorscale,
            zmin=0,
            zmax=1,
            showscale=False,
            marker_line_color='black',
            marker_line_width=0.5,
            hovertext=highlight_df["Country"],
            hoverinfo="text"
        )
    )
    fig.update_geos(
        scope="europe",
        projection_type="natural earth",
        showland=True,
        landcolor="#C5CAAA",
        showframe=False,
        showcoastlines=False,
        bgcolor="#C5CAAA"
    )
    fig.update_layout(
        title_text="<b>European Birth Statistics <b>",  # Added Title
        title_x=0.5,  # Center the title
        title_font=dict(size=65, color="#8E0001"),  # Style the title
        dragmode=False,
        width=1200,
        height=700,
        margin={"r": 0, "t": 100, "l": 0, "b": 0},  # Adjusted top margin to accommodate title
        paper_bgcolor="#C5CAAA",
        plot_bgcolor="#C5CAAA"
    )
    return fig

# Layout
app.layout = html.Div(
    style={"backgroundColor": "#C5CAAA", "padding": "20px"},
    children=[
        # Top Section: Map and Facts Box
        html.Div(
            style={"display": "flex", "flexDirection": "row"},
            children=[
                # Map
                html.Div(
                    dcc.Graph(
                        id="map",
                        figure=build_map_figure(),
                        config={"displayModeBar": False},  # Disable mode bar
                        style={"flex": "1"}
                    )
                ),
                # Facts Box
                html.Div(
                    id="facts-box",
                    style={
                        "padding": "15px",
                        "border": "2px solid #093041",
                        "backgroundColor": "#C5CAAA",
                        "marginLeft": "30px",
                        "color": "#093041",
                        "fontSize": "16px",
                        "fontFamily": "Champion Gothic Featherweight",
                        "textAlign": "left",
                        "overflowY": "auto",
                        "height": "400px",
                        "width": "350px"
                    },
                    children=[
                        html.H3("Overview of the Fertility Dataset", style={"color": "#8E0001", "textAlign": "center"}),
                        html.P(f"Highest Birth Rate: {df['Birth Rate'].max()} ({df.loc[df['Birth Rate'].idxmax(), 'Country']}, {df.loc[df['Birth Rate'].idxmax(), 'Year']})", style={"color": "#093041"}),
                        html.P(f"Lowest Birth Rate: {df['Birth Rate'].min()} ({df.loc[df['Birth Rate'].idxmin(), 'Country']}, {df.loc[df['Birth Rate'].idxmin(), 'Year']})", style={"color": "#093041"}),
                        html.P(f"Highest TFR: {df['Total Fertility Rate'].max()} ({df.loc[df['Total Fertility Rate'].idxmax(), 'Country']}, {df.loc[df['Total Fertility Rate'].idxmax(), 'Year']})", style={"color": "#093041"}),
                        html.P(f"Lowest TFR: {df['Total Fertility Rate'].min()} ({df.loc[df['Total Fertility Rate'].idxmin(), 'Country']}, {df.loc[df['Total Fertility Rate'].idxmin(), 'Year']})", style={"color": "#093041"}),
                        html.P(f"Highest Mean Age at Birth: {df['MAB'].max()} ({df.loc[df['MAB'].idxmax(), 'Country']}, {df.loc[df['MAB'].idxmax(), 'Year']})", style={"color": "#093041"}),
                        html.P(f"Lowest Mean Age at Birth: {df['MAB'].min()} ({df.loc[df['MAB'].idxmin(), 'Country']}, {df.loc[df['MAB'].idxmin(), 'Year']})", style={"color": "#093041"}),
                    ]
                )
            ]
        ),
        # Country Title
        html.Div(
            id="country-title",
            style={"textAlign": "center", "marginTop": "20px"},
            children=[html.H3("Selected Country: None", style={"color": "#093041"})]
        ),
        # Country History
        html.Div(
            id='country-history',
            style={
                'marginTop': '20px',
                'fontSize': '16px',
                'color': '#8E0001',
                'fontFamily': "Champion Gothic Featherweight"
            },
            children=[]  # Initially empty and remains empty as per user's request
        ),
        # Charts Section
        html.Div(
            id="charts",
            style={"display": "none", "justifyContent": "space-between", "marginTop": "20px"},
            children=[
                dcc.Graph(
                    id="birth-rate-chart",
                    style={"width": "30%"},
                    config={"displayModeBar": False}  # Disable mode bar
                ),
                dcc.Graph(
                    id="tfr-chart",
                    style={"width": "30%"},
                    config={"displayModeBar": False}  # Disable mode bar
                ),
                dcc.Graph(
                    id="mab-chart",
                    style={"width": "30%"},
                    config={"displayModeBar": False}  # Disable mode bar
                )
            ]
        ),
        # New Section (if needed)
        html.Div(
            id="new-section",
            style={"display": "none", "marginTop": "20px"},
            children=[
                html.Hr(
                    style={
                        "borderColor": "#6D0100",
                        "borderWidth": "1.5px",
                        "borderStyle": "groove",
                        "marginTop": "100px",
                        "marginBottom": "100px",
                        "width": "80%"  # Adjust width as needed
                    }
                )
            ]
        ),
        # Control Section: Dropdowns and Sliders
        html.Div(
            id='controls-section',
            style={"display": "none", "marginTop": "20px","color": "#093041"},
            children=[
                # Dropdown for Country Comparison
                dcc.Dropdown(
                    id='country-dropdown',
                    options=[{'label': country, 'value': country} for country in highlight_df['Country']],
                    value=None,
                    placeholder="Select a Country for Comparison",
                    style={'marginBottom': '20px', "width":"100%", "color": "#093041"},
                ),
                # Year Range Sliders
                html.Div([
                    html.Label("Start Year:", style={"color": "#093041"}),
                    dcc.Slider(
                        id='start-year-slider',
                        min=int(df['Year'].min()) if not df['Year'].empty else 0,
                        max=int(df['Year'].max()) if not df['Year'].empty else 0,
                        step=1,
                        value=int(df['Year'].min()) if not df['Year'].empty else 0,
                        marks={year: str(year) for year in range(int(df['Year'].min()), int(df['Year'].max()) + 1, 5)} if not df['Year'].empty else {},
                        tooltip={"placement": "bottom", "always_visible": True},
                    ),
                ], style={'marginBottom': '20px'}),
                html.Div([
                    html.Label("End Year:", style={"color": "#093041"}),
                    dcc.Slider(
                        id='end-year-slider',
                        min=int(df['Year'].min()) if not df['Year'].empty else 0,
                        max=int(df['Year'].max()) if not df['Year'].empty else 0,
                        step=1,
                        value=int(df['Year'].max()) if not df['Year'].empty else 0,
                        marks={year: str(year) for year in range(int(df['Year'].min()), int(df['Year'].max()) + 1, 5)} if not df['Year'].empty else {},
                        tooltip={"placement": "bottom", "always_visible": True},
                    ),
                ], style={'marginBottom': '20px'}),
                # Variable Selection Dropdown
                dcc.Dropdown(
                    id='variable-dropdown',
                    options=[
                        {'label': 'Total Fertility Rate', 'value': 'Total Fertility Rate'},
                        {'label': 'Birth Rate', 'value': 'Birth Rate'},
                        {'label': 'Mean Age at Birth (MAB)', 'value': 'MAB'},
                    ],
                    value='Total Fertility Rate',
                    placeholder="Select a Variable",
                    style={'marginBottom': '20px', "width": "100%"},
                ),
                # Comparison Line Graph
                dcc.Graph(
                    id='selected-countries-graph',
                    config={"displayModeBar": False}  # Disable mode bar
                ),
            ]
        ),
        # Explore More Countries Button
        html.Button(
            "← Explore more countries",
            id="go-back-btn",
            style={
                "position": "fixed",
                "top": "20px",
                "right": "20px",
                "background": "linear-gradient(45deg, #FF6F61, #FF3D00)",
                "color": "white",
                "border": "none",
                "padding": "12px 24px",
                "fontSize": "18px",
                "fontWeight": "bold",
                "cursor": "pointer",
                "borderRadius": "30px",
                "boxShadow": "0 4px 8px rgba(0, 0, 0, 0.2)",
                "transition": "all 0.3s ease",
                "display": "none",
            }
        )
    ]
)

# Callback to Update Dashboard Components
@app.callback(
    [
        Output("map", "figure"),
        Output("birth-rate-chart", "figure"),
        Output("tfr-chart", "figure"),
        Output("mab-chart", "figure"),
        Output("charts", "style"),
        Output("new-section", "style"),
        Output("country-title", "children"),
        Output("facts-box", "children"),
        Output('country-history', 'children'),
        Output('controls-section', 'style'),
        Output('go-back-btn', 'style'),
        Output('selected-countries-graph', 'figure')
    ],
    [
        Input("map", "clickData"),
        Input('country-dropdown', 'value'),
        Input('go-back-btn', 'n_clicks'),
        Input('start-year-slider', 'value'),
        Input('end-year-slider', 'value'),
        Input('variable-dropdown', 'value'),
    ],
    [State('country-dropdown', 'options')]
)
def update_dashboard(click_data, dropdown_value, n_clicks, start_year, end_year, selected_variable, dropdown_options):
    """
    Updates the dashboard based on user interactions with the map, dropdowns, sliders, and buttons.
    """
    ctx = dash.callback_context

    if not ctx.triggered:
        triggered_input = None
    else:
        triggered_input = ctx.triggered[0]['prop_id'].split('.')[0]

    # Initialize default styles and values
    charts_style = {"display": "none"}
    new_section_style = {"display": "none"}
    country_title = html.H3("Selected Country: None", style={"color": "#093041"})
    facts_box = html.Div(
        children=[
            html.H3("Overview of the Fertility Dataset", style={"color": "#8E0001", "textAlign": "center"}),
            html.P(f"Highest Birth Rate: {df['Birth Rate'].max()} ({df.loc[df['Birth Rate'].idxmax(), 'Country']}, {df.loc[df['Birth Rate'].idxmax(), 'Year']})", style={"color": "#093041"}),
            html.P(f"Lowest Birth Rate: {df['Birth Rate'].min()} ({df.loc[df['Birth Rate'].idxmin(), 'Country']}, {df.loc[df['Birth Rate'].idxmin(), 'Year']})", style={"color": "#093041"}),
            html.P(f"Highest TFR: {df['Total Fertility Rate'].max()} ({df.loc[df['Total Fertility Rate'].idxmax(), 'Country']}, {df.loc[df['Total Fertility Rate'].idxmax(), 'Year']})", style={"color": "#093041"}),
            html.P(f"Lowest TFR: {df['Total Fertility Rate'].min()} ({df.loc[df['Total Fertility Rate'].idxmin(), 'Country']}, {df.loc[df['Total Fertility Rate'].idxmin(), 'Year']})", style={"color": "#093041"}),
            html.P(f"Highest Mean Age at Birth: {df['MAB'].max()} ({df.loc[df['MAB'].idxmax(), 'Country']}, {df.loc[df['MAB'].idxmax(), 'Year']})", style={"color": "#093041"}),
            html.P(f"Lowest Mean Age at Birth: {df['MAB'].min()} ({df.loc[df['MAB'].idxmin(), 'Country']}, {df.loc[df['MAB'].idxmin(), 'Year']})", style={"color": "#093041"}),
        ]
    )
    country_history_div = None  # No message to display
    controls_section_style = {"display": "none"}
    go_back_button_style = {"display": "none"}
    selected_countries_graph = go.Figure()

    selected_country = None

    if triggered_input == "go-back-btn":
        # Reset to default view when "Explore more countries" button is clicked
        return (
            build_map_figure(),
            go.Figure(),
            go.Figure(),
            go.Figure(),
            {"display": "none"},
            {"display": "none"},
            html.H3("Selected Country: None", style={"color": "#093041"}),
            html.Div(
                children=[
                    html.H3("Overview of the Fertility Dataset", style={"color": "#8E0001", "textAlign": "center"}),
                    html.P(f"Highest Birth Rate: {df['Birth Rate'].max()} ({df.loc[df['Birth Rate'].idxmax(), 'Country']}, {df.loc[df['Birth Rate'].idxmax(), 'Year']})", style={"color": "#093041"}),
                    html.P(f"Lowest Birth Rate: {df['Birth Rate'].min()} ({df.loc[df['Birth Rate'].idxmin(), 'Country']}, {df.loc[df['Birth Rate'].idxmin(), 'Year']})", style={"color": "#093041"}),
                    html.P(f"Highest TFR: {df['Total Fertility Rate'].max()} ({df.loc[df['Total Fertility Rate'].idxmax(), 'Country']}, {df.loc[df['Total Fertility Rate'].idxmax(), 'Year']})", style={"color": "#093041"}),
                    html.P(f"Lowest TFR: {df['Total Fertility Rate'].min()} ({df.loc[df['Total Fertility Rate'].idxmin(), 'Country']}, {df.loc[df['Total Fertility Rate'].idxmin(), 'Year']})", style={"color": "#093041"}),
                    html.P(f"Highest Mean Age at Birth: {df['MAB'].max()} ({df.loc[df['MAB'].idxmax(), 'Country']}, {df.loc[df['MAB'].idxmax(), 'Year']})", style={"color": "#093041"}),
                    html.P(f"Lowest Mean Age at Birth: {df['MAB'].min()} ({df.loc[df['MAB'].idxmin(), 'Country']}, {df.loc[df['MAB'].idxmin(), 'Year']})", style={"color": "#093041"}),
                ]
            ),
            None,  # No country history
            {"display": "none"},
            {"display": "none"},
            go.Figure()
        )

    # Determine if a country was selected via map click
    if click_data:
        # If a country is clicked on the map
        selected_country = click_data["points"][0]["hovertext"]

    # Proceed only if a primary country is selected via map
    if selected_country:
        # Update Map Figure
        updated_map = build_map_figure(selected_country)

        # Check if historical information is available
        if selected_country in country_histories:
            history_text = country_histories[selected_country]
        else:
            history_text = f"No historical information available for {selected_country}."

        # Update Facts Box with historical information using Markdown for better readability
        facts_box = html.Div(
            children=[
                html.H3(f"Facts about {selected_country}", style={"color": "#8E0001"}),
                dcc.Markdown(
                    history_text.replace("\n", "\n\n"),
                    style={"color": "#093041", "fontSize": "16px"}
                )
            ]
        )

        # Update Country Title
        country_title = html.H3(f"Selected Country: {selected_country}", style={"color": "#093041"})

        # Show Charts and New Section
        charts_style = {"display": "flex"}
        new_section_style = {"display": "block"}

        # Show Control Section and Go Back Button
        controls_section_style = {"display": "block"}
        go_back_button_style = {"display": "inline-block"}

        # Prepare Data for Comparison Graph
        selected_countries = [selected_country]
        comparison_country = dropdown_value

        if comparison_country and comparison_country != selected_country:
            selected_countries.append(comparison_country)

        filtered_data = df[(df['Country'].isin(selected_countries)) &
                           (df['Year'] >= start_year) &
                           (df['Year'] <= end_year)]

        # Define Variable Label
        variable_label = {
            'Total Fertility Rate': 'Total Fertility Rate (TFR)',
            'Birth Rate': 'Birth Rate',
            'MAB': 'Mean Age at Birth (MAB)'
        }.get(selected_variable, selected_variable)

        # Define Color Map
        color_map = {}
        if selected_country:
            color_map[selected_country] = "#093041"  # Blue for the selected country
        if comparison_country and comparison_country != selected_country:
            color_map[comparison_country] = "#8E0001"  # Red for the comparison country

        # Create Comparison Line Graph
        if len(selected_countries) > 1 and not filtered_data.empty:
            graph_fig = px.line(
                filtered_data,
                x='Year',
                y=selected_variable,
                color='Country',
                title=f"{variable_label} Comparison ({start_year} - {end_year})",
                labels={'Year': 'Year', selected_variable: variable_label},
                color_discrete_map=color_map
            )
            graph_fig.update_layout(
                plot_bgcolor="#C5CAAA",
                paper_bgcolor="#C5CAAA",
            )
        elif len(selected_countries) == 1 and not filtered_data.empty:
            # If only one country is selected, display its data
            graph_fig = px.line(
                filtered_data,
                x='Year',
                y=selected_variable,
                title=f"{variable_label} in {selected_country} ({start_year} - {end_year})",
                labels={'Year': 'Year', selected_variable: variable_label},
                color_discrete_map={selected_country: "#093041"}
            )
            graph_fig.update_layout(
                plot_bgcolor="#C5CAAA",
                paper_bgcolor="#C5CAAA",
            )
        else:
            graph_fig = no_data_chart(
                chart_title=f"{variable_label} Comparison ({start_year} - {end_year})",
                x_label="Year",
                y_label=variable_label,
                message="No data available for comparison."
            )

        # Generate Charts
        # Birth Rate Chart
        country_data = df[df["Country"] == selected_country]
        if not country_data["Birth Rate"].dropna().empty:
            birth_rate_chart = build_chart(
                chart_title=f"<b>Birth Rate in <b> {selected_country}",
                x=country_data["Year"],
                y=country_data["Birth Rate"],
                x_label="Year",
                y_label="Birth Rate (per 1000)",
                color="#8E0001"
            )
        else:
            birth_rate_chart = no_data_chart(
                chart_title=f"<b> Birth Rate in <b> {selected_country}",
                x_label="Year",
                y_label="Birth Rate (per 1000)",
                message="No Birth Rate data available for this country"
            )

        # Total Fertility Rate (TFR) Chart
        tfr_chart = build_tfr_chart(selected_country)

        # MAB Chart
        mab_chart = build_mab_chart(selected_country)

        return (
            updated_map,             # Output("map", "figure")
            birth_rate_chart,        # Output("birth-rate-chart", "figure")
            tfr_chart,               # Output("tfr-chart", "figure")
            mab_chart,               # Output("mab-chart", "figure")
            charts_style,            # Output("charts", "style")
            new_section_style,       # Output("new-section", "style")
            country_title,           # Output("country-title", "children")
            facts_box,               # Output("facts-box", "children")
            country_history_div,     # Output('country-history', 'children')
            controls_section_style,  # Output('controls-section', 'style')
            go_back_button_style,    # Output('go-back-btn', 'style')
            graph_fig                # Output('selected-countries-graph', 'figure')
        )
    else:
        # If no country is selected, return default figures and styles
        return (
            build_map_figure(),
            go.Figure(),
            go.Figure(),
            go.Figure(),
            {"display": "none"},
            {"display": "none"},
            html.H3("Selected Country: None", style={"color": "#093041"}),
            html.Div(
                children=[
                    html.H3("Overview of the Fertility Dataset", style={"color": "#8E0001", "textAlign": "center"}),
                    html.P(f"Highest Birth Rate: {df['Birth Rate'].max()} ({df.loc[df['Birth Rate'].idxmax(), 'Country']}, {df.loc[df['Birth Rate'].idxmax(), 'Year']})", style={"color": "#093041"}),
                    html.P(f"Lowest Birth Rate: {df['Birth Rate'].min()} ({df.loc[df['Birth Rate'].idxmin(), 'Country']}, {df.loc[df['Birth Rate'].idxmin(), 'Year']})", style={"color": "#093041"}),
                    html.P(f"Highest TFR: {df['Total Fertility Rate'].max()} ({df.loc[df['Total Fertility Rate'].idxmax(), 'Country']}, {df.loc[df['Total Fertility Rate'].idxmax(), 'Year']})", style={"color": "#093041"}),
                    html.P(f"Lowest TFR: {df['Total Fertility Rate'].min()} ({df.loc[df['Total Fertility Rate'].idxmin(), 'Country']}, {df.loc[df['Total Fertility Rate'].idxmin(), 'Year']})", style={"color": "#093041"}),
                    html.P(f"Highest Mean Age at Birth: {df['MAB'].max()} ({df.loc[df['MAB'].idxmax(), 'Country']}, {df.loc[df['MAB'].idxmax(), 'Year']})", style={"color": "#093041"}),
                    html.P(f"Lowest Mean Age at Birth: {df['MAB'].min()} ({df.loc[df['MAB'].idxmin(), 'Country']}, {df.loc[df['MAB'].idxmin(), 'Year']})", style={"color": "#093041"}),
                ]
            ),
            None,  # No country history
            {"display": "none"},
            {"display": "none"},
            go.Figure()
        )

# Callback to Update the Comparison Dropdown Options
@app.callback(
    Output('country-dropdown', 'options'),
    Input('country-title', 'children')
)
def update_comparison_dropdown(selected_country_title):
    """
    Updates the comparison dropdown options to exclude the selected country.
    """
    if selected_country_title and isinstance(selected_country_title, list) and len(selected_country_title) > 0:
        # Extract the text from the first child (assuming it's an H3 component)
        h3_component = selected_country_title[0]
        selected_country_text = h3_component['props']['children']

        # Check if the text contains the expected prefix
        if "Selected Country:" in selected_country_text:
            selected_country = selected_country_text.split("Selected Country: ")[1]
            # Exclude the selected_country from the dropdown options
            filtered_options = [{'label': country, 'value': country} for country in highlight_df['Country'] if country != selected_country]
        else:
            # If the text doesn't contain the expected prefix, show all options
            filtered_options = [{'label': country, 'value': country} for country in highlight_df['Country']]
    else:
        # If no country is selected, show all options
        filtered_options = [{'label': country, 'value': country} for country in highlight_df['Country']]

    return filtered_options

# Run the app
if __name__ == "__main__":
    app.run_server(debug=True, host="0.0.0.0", port=8070)

